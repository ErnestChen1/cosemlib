

#include "os_util.h"
#include "hdlc.h"
#include "csm_array.h"
#include "csm_association.h"

#include "catch.hpp"
#include <iostream>
#include <cstdlib>
#include <cstring>
#include <cstdint>


static const uint8_t expected_aarq[] = {  0x60U,  0x36U, 0xA1U,   0x09U,   0x06U,   0x07U,  0x60U,  0x85U,
                                        0x74U,   0x05U,   0x08U,   0x01U,   0x01U, 0x8AU,   0x02U,   0x07U,
                                        0x80U, 0x8BU,   0x07U,  0x60U,  0x85U,  0x74U,   0x05U,   0x08U,
                                         0x02U,   0x01U, 0xACU, 0x0AU,  0x80U,   0x08U,  0x00U,  0x00U,
                                        0x00U,  0x00U,  0x00U,  0x00U,  0x00U,  0x00U, 0xBEU,  0x10U,
                                         0x04U, 0x0EU,   0x01U,   0x00U,   0x00U,   0x00U,   0x06U, 0x5FU,
                                       0x1FU,   0x04U,   0x00U,   0xFFU,  0xFFU, 0xFFU, 0xFFU, 0xFFU
 };

// Two AARQ examples, first one generated by us, second is by Gurux stack
// 60 36 A1 09060760857405080101 8A020780 8B0760857405080201AC0A8008 0000000000000000 BE10040E 01 00 00 00 065F1F0400 FFFFFF FFFF
// 60 36 A1 09060760857405080101 8A020780 8B0760857405080201AC0A8008 4142434445464748 BE10040E 01 00 00 00 065F1F0400 401E1D FFFF

extern "C" void csm_sys_init();

void AARQEncoder()
{
    csm_asso_state state;
    static const uint32_t packet_size = 150U;
    uint8_t packet[packet_size];
    csm_array array;

    csm_sys_init();

    state.auth_level = CSM_AUTH_LOW_LEVEL;
    state.ref = LN_REF;

    csm_array_init(&array, &packet[0], packet_size, 0U, 0U);

    int ret = csm_asso_encoder(&state, &array, CSM_ASSO_AARQ);

    REQUIRE(ret == TRUE);

    for (uint32_t i = 0; i< sizeof(expected_aarq); i++)
    {
        if (expected_aarq[i] != packet[i])
        {
            std::cout << "Different at: " << i << std::endl;
        }
        REQUIRE(expected_aarq[i] == packet[i]);
    }

    debug_puts("AARQ data: ");
    print_hex((const char*)&packet[0], csm_array_written(&array));
    debug_puts("\r\n");
}

TEST_CASE( "AARQ", "[AARQ-Encoder]" )
{
    puts("\r\n--------------------------  COSEM AARQ 1  --------------------------\r\n");
    AARQEncoder();
}

